<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DescNume" xml:space="preserve">
    <value>Select "SeriesName" From NNM1 Where "Series" =  $[@FEDIAN_NUMAUTORI.Code]</value>
    <comment>Obtiene el nombre de la numeracion</comment>
  </data>
  <data name="DescRespon" xml:space="preserve">
    <value>Select "Name" From "@FEDIAN_RESPONSA" Where "Code" =  $[@FEDIAN_SNRES.U_Codigo]</value>
    <comment>Obtiene descripcion responsabilidades</comment>
  </data>
  <data name="DescTribu" xml:space="preserve">
    <value>Select "Name" From "@FEDIAN_TRIBU" Where "Code" =  $[@FEDIAN_SNTRI.U_Codigo]</value>
    <comment>Obtiene descripcion tributos</comment>
  </data>
  <data name="ListaDocDIAN" xml:space="preserve">
    <value>Select "Code", "Name" 
From "@FEDIAN_CODDOC"</value>
    <comment>Lista los documentos de FE</comment>
  </data>
  <data name="ListaNume" xml:space="preserve">
    <value>Select "Series", "SeriesName", "InitialNum", "LastNum", "DocSubType",
Case 
When "ObjectCode" = '14' Then 'Nota de Cerdito'
When "ObjectCode" = '13' And "DocSubType" = '--' Then 'Factura de Venta' 
When "ObjectCode" = '13' And "DocSubType" = 'DN' Then 'Nota de Debito' 
When "ObjectCode" = '13' And "DocSubType" = 'IX' Then 'Factura de Exportacion' 
When "ObjectCode" = '13' And "DocSubType" = 'RI' Then 'Factura de Reserva' 
End "Tipo de documento"
From "NNM1"
Where "Series" Not In (Select "Code" from "@FEDIAN_NUMAUTORI") And 
"Locked" = 'N' And "ObjectCode" In ('13', '14') And "DocSubType" In ('--', 'DN', 'IX', 'RI')
Order By "ObjectCode", "DocSubType"</value>
    <comment>Listar Numeraciones</comment>
  </data>
  <data name="ListaRespon" xml:space="preserve">
    <value>Select * from "@FEDIAN_RESPONSA"
Order By "Code"</value>
    <comment>Lista de Responsabilidades</comment>
  </data>
  <data name="ListaTribu" xml:space="preserve">
    <value>Select * from "@FEDIAN_TRIBU"
Order By "Code"</value>
    <comment>Lista de tributos</comment>
  </data>
  <data name="ListaUM" xml:space="preserve">
    <value>Select "Code", "U_Descripcion" 
From "@FEDIAN_UM"</value>
    <comment>Lista todas las unidades de medida DIAN</comment>
  </data>
  <data name="NombreSN" xml:space="preserve">
    <value>Select "CardName" From "OCRD" Where "CardCode" =  $[@FEDIAN_SN.Code]</value>
    <comment>Obtiene el CardName del SN</comment>
  </data>
  <data name="TipoDoc" xml:space="preserve">
    <value>Select * from "@HBT_TIPODOC"</value>
    <comment>Lista los tipos de documento</comment>
  </data>
  <data name="UM_DIAN" xml:space="preserve">
    <value>Select 
Case 
When $[$38.1470002145.0] = 'Manual' Then (SELECT T0."U_DIAN_UM" FROM "@FEDIAN_HOMOL_UM" T0 WHERE T0."U_SAP_UM" = $[$38.212.0])
Else (SELECT T0."U_DIAN_UM" FROM "@FEDIAN_HOMOL_UM" T0 WHERE T0."U_SAP_UM" = $[$38.1470002145.0])
End 
From "OADM"</value>
    <comment>Obtiene la uniad de medida de la DIAN</comment>
  </data>
  <data name="UM_Pendientes" xml:space="preserve">
    <value>Select C0."Unidad", C0."Descr"
From(
	SELECT 
	Case When "UomCode" = 'Manual' Then "unitMsr" Else "UomCode" End "Unidad", 
	"unitMsr" as "Descr" 
	FROM INV1
)C0 
Where IsNull("Unidad",'') != '' And C0."Unidad" Not In (Select "U_SAP_UM" From "@FEDIAN_HOMOL_UM" Where IsNull("U_DIAN_UM",'') != '')
Group By C0."Unidad", C0."Descr"</value>
    <comment>Unidades de medida pendiente por homologar</comment>
  </data>
</root>